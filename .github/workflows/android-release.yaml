name: Android Release
on:
  workflow_dispatch:  # Manual trigger

env:
  RELEASE_NOTES: android/src/google/play/release-notes/en-US/default.txt
  FDROID_VERSION: android/src/fdroid/play/version.yaml

jobs:
  tag:
    name: Tag
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 100  # Enough to get all commits for the last day.
          ssh-key: ${{ secrets.RELEASE_SSH_KEY }}

  android-release:
    name: Android Release
    runs-on: ubuntu-latest
    environment: production
    needs: tag
    strategy:
      fail-fast: false
      
    steps:
      - name: Install build tools and dependencies
        shell: bash
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build

      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 100 # enough to get all commits for the current day
          ref: 'refs/tags/${{ needs.tag.outputs.tag }}'

      - name: Check tag
        shell: bash
        run: |
          git show HEAD
          test -n "${{ needs.tag.outputs.tag }}"
          test "$(git tag --points-at HEAD)" = "${{ needs.tag.outputs.tag }}"

      - name: Parallel submodules checkout
        shell: bash
        run: git submodule update --depth 1 --init --recursive --jobs=$(($(nproc) * 20))

      - name: Checkout screenshots
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.SCREENSHOTS_REPO }}
          ssh-key: ${{ secrets.SCREENSHOTS_SSH_KEY }}
          ref: master
          path: screenshots

      - name: Checkout private keys
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.PRIVATE_REPO }}
          ssh-key: ${{ secrets.PRIVATE_SSH_KEY }}
          ref: master
          path: private.git

      - name: Configure repo with private keys
        shell: bash
        run: |
          ./configure.sh ./private.git
          rm -rf ./private.git

      - name: Set up SDK
        shell: bash
        run: (cd tools/android; ./set_up_android.py --sdk $ANDROID_SDK_ROOT)

      - name: Compile universal APK
        shell: bash
        working-directory: android
        run: |
          gradle assembleWebRelease
